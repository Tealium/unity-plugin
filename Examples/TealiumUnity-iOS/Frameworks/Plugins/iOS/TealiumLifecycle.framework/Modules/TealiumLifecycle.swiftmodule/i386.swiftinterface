// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target i386-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TealiumLifecycle
import Foundation
import Swift
import TealiumCore
import UIKit
public enum LifecycleKey {
}
public enum LifecycleType {
  case launch, sleep, wake
  public var description: Swift.String {
    get
  }
  public static func == (a: TealiumLifecycle.LifecycleType, b: TealiumLifecycle.LifecycleType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct Lifecycle : Swift.Codable {
  public init(from dictionary: [Swift.String : Any])
  public init(from decoder: Swift.Decoder) throws
  public func asDictionary(type: Swift.String?, for date: Foundation.Date) -> [Swift.String : Any]
  public mutating func newLaunch(at date: Foundation.Date, overrideSession: TealiumLifecycle.LifecycleSession?) -> [Swift.String : Any]
  public mutating func newSleep(at date: Foundation.Date) -> [Swift.String : Any]
  public func newTrack(at date: Foundation.Date) -> [Swift.String : Any]
  public mutating func newWake(at date: Foundation.Date, overrideSession: TealiumLifecycle.LifecycleSession?) -> [Swift.String : Any]
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers open class LifecyclePersistentData {
  @objc deinit
}
extension Tealium {
  public var lifecycle: TealiumLifecycle.LifecycleModule? {
    get
  }
}
extension Collectors {
  public static let Lifecycle: TealiumLifecycle.LifecycleModule.Type
}
public struct LifecycleSession : Swift.Codable, Swift.Equatable {
  public init?(coder aDecoder: Foundation.NSCoder)
  public func encode(with aCoder: Foundation.NSCoder)
  public static func == (lhs: TealiumLifecycle.LifecycleSession, rhs: TealiumLifecycle.LifecycleSession) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class LifecycleModule : TealiumCore.Collector {
  final public let id: Swift.String
  public var config: TealiumCore.TealiumConfig
  public var data: [Swift.String : Any]? {
    get
  }
  required public init(context: TealiumCore.TealiumContext, delegate: TealiumCore.ModuleDelegate?, diskStorage: TealiumCore.TealiumDiskStorageProtocol?, completion: ((Swift.Result<Swift.Bool, Swift.Error>, [Swift.String : Any]?)) -> Swift.Void)
  public func process(type: TealiumLifecycle.LifecycleType, at date: Foundation.Date, autotracked: Swift.Bool = false)
  public func lifecycleAcceptable(type: TealiumLifecycle.LifecycleType) -> Swift.Bool
  public func lifecycleDetected(type: TealiumLifecycle.LifecycleType, at date: Foundation.Date = Date())
  public func requestTrack(data: [Swift.String : Any])
  @objc deinit
}
extension LifecycleModule : TealiumCore.TealiumLifecycleEvents {
  public func sleep()
  public func wake()
  public func launch(at date: Foundation.Date)
}
extension TealiumLifecycle.LifecycleType : Swift.Equatable {}
extension TealiumLifecycle.LifecycleType : Swift.Hashable {}
