// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target i386-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TealiumRemoteCommands
import Foundation
import Swift
import TealiumCore
import UIKit
import UserNotifications
public class RemoteCommandResponse : TealiumRemoteCommands.RemoteCommandResponseProtocol, Swift.CustomStringConvertible {
  public var status: Swift.Int?
  public var urlRequest: Foundation.URLRequest?
  public var urlResponse: Foundation.URLResponse?
  public var data: Foundation.Data?
  public var error: Swift.Error?
  public var payload: [Swift.String : Any]?
  public var hasCustomCompletionHandler: Swift.Bool
  public var description: Swift.String {
    get
  }
  convenience public init?(urlString: Swift.String)
  public init?(request: Foundation.URLRequest)
  public func configData(from requestData: [Swift.String : Any]) -> [Swift.String : Any]?
  public func payload(from requestData: [Swift.String : Any]) -> [Swift.String : Any]?
  public var config: [Swift.String : Any] {
    get
  }
  public var responseId: Swift.String? {
    get
  }
  @objc deinit
}
@objc public class RemoteCommandsManager : ObjectiveC.NSObject, TealiumRemoteCommands.RemoteCommandsManagerProtocol {
  public var jsonCommands: [TealiumRemoteCommands.RemoteCommandProtocol]
  public var webviewCommands: [TealiumRemoteCommands.RemoteCommandProtocol]
  weak public var moduleDelegate: TealiumCore.ModuleDelegate?
  public init(config: TealiumCore.TealiumConfig, delegate: TealiumCore.ModuleDelegate?, urlSession: TealiumCore.URLSessionProtocol = URLSession.shared, diskStorage: TealiumCore.TealiumDiskStorageProtocol? = nil)
  public func refresh(_ command: TealiumRemoteCommands.RemoteCommandProtocol, url: Foundation.URL, file: Swift.String)
  public func config(from data: Foundation.Data) -> TealiumRemoteCommands.RemoteCommandConfig?
  public func retrieveAndSave(_ command: TealiumRemoteCommands.RemoteCommandProtocol, url: Foundation.URL, file: Swift.String)
  public func add(_ remoteCommand: TealiumRemoteCommands.RemoteCommandProtocol)
  public func remove(commandWithId: Swift.String)
  public func remove(jsonCommand name: Swift.String)
  public func removeAll()
  public func trigger(command type: TealiumRemoteCommands.SimpleCommandType, with data: [Swift.String : Any], completion: TealiumCore.ModuleCompletion?)
  @discardableResult
  public func triggerCommand(from request: Foundation.URLRequest) -> TealiumRemoteCommands.TealiumRemoteCommandsError?
  @objc deinit
  @objc override dynamic public init()
}
extension RemoteCommandsManager : TealiumRemoteCommands.RemoteCommandDelegate {
  public func remoteCommandRequestsExecution(_ command: TealiumRemoteCommands.RemoteCommandProtocol, response: TealiumRemoteCommands.RemoteCommandResponseProtocol)
}
open class RemoteCommand : TealiumRemoteCommands.RemoteCommandProtocol {
  final public let commandId: Swift.String
  weak public var delegate: TealiumRemoteCommands.RemoteCommandDelegate?
  public var description: Swift.String?
  public var config: TealiumRemoteCommands.RemoteCommandConfig?
  public var type: TealiumRemoteCommands.RemoteCommandType
  public var completion: (TealiumRemoteCommands.RemoteCommandResponseProtocol) -> Swift.Void
  public init(commandId: Swift.String, description: Swift.String?, type: TealiumRemoteCommands.RemoteCommandType = .webview, completion: @escaping (TealiumRemoteCommands.RemoteCommandResponseProtocol) -> Swift.Void)
  public func completeWith(response: TealiumRemoteCommands.RemoteCommandResponseProtocol)
  public func complete(with trackData: [Swift.String : Any], config: TealiumRemoteCommands.RemoteCommandConfig, completion: TealiumCore.ModuleCompletion?)
  public class func sendRemoteCommandResponse(for commandId: Swift.String, response: TealiumRemoteCommands.RemoteCommandResponseProtocol, delegate: TealiumCore.ModuleDelegate?)
  public func process(trackData: [Swift.String : Any], commandConfig: TealiumRemoteCommands.RemoteCommandConfig, completion: TealiumCore.ModuleCompletion?) -> [Swift.String : Any]?
  public func mapPayload(_ payload: [Swift.String : Any], lookup: [Swift.String : Swift.String]) -> [Swift.String : Any]
  public func objectMap(payload: [Swift.String : Any], lookup: [Swift.String : Swift.String]) -> [Swift.String : Any]
  @objc deinit
}
public class JSONRemoteCommandResponse : TealiumRemoteCommands.RemoteCommandResponseProtocol {
  public var payload: [Swift.String : Any]?
  public var error: Swift.Error?
  public var status: Swift.Int?
  public var data: Foundation.Data?
  public var hasCustomCompletionHandler: Swift.Bool
  public init(with payload: [Swift.String : Any])
  @objc deinit
}
public enum RemoteCommandType {
  case webview
  case remote(url: Swift.String)
  case local(file: Swift.String, bundle: Foundation.Bundle? = nil)
}
public enum SimpleCommandType {
  case webview
  case JSON
  public static func == (a: TealiumRemoteCommands.SimpleCommandType, b: TealiumRemoteCommands.SimpleCommandType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum TealiumRemoteCommandsError : Swift.Error, Swift.Equatable {
  case invalidScheme
  case commandIdNotFound
  case commandNotFound
  case remoteCommandsDisabled
  case requestNotProperlyFormatted
  case invalidFileName
  case couldNotConvertData
  case couldNotDecodeJSON
  case errorLoadingRemoteJSON
  case mappingsNotFound
  case commandsNotFound
  case commandNameNotFound
  case noResponse
  case invalidResponse
  case notModified
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TealiumRemoteCommands.TealiumRemoteCommandsError, b: TealiumRemoteCommands.TealiumRemoteCommandsError) -> Swift.Bool
}
public struct RemoteCommandConfig : Swift.Codable {
  public init(config: [Swift.String : Any], mappings: [Swift.String : Swift.String], apiCommands: [Swift.String : Swift.String], commandName: Swift.String?, commandURL: Foundation.URL?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public init?(file name: Swift.String, _ logger: TealiumCore.TealiumLoggerProtocol?, _ bundle: Foundation.Bundle?)
}
public protocol RemoteCommandsManagerProtocol {
  var jsonCommands: [TealiumRemoteCommands.RemoteCommandProtocol] { get set }
  var webviewCommands: [TealiumRemoteCommands.RemoteCommandProtocol] { get set }
  var moduleDelegate: TealiumCore.ModuleDelegate? { get set }
  func add(_ remoteCommand: TealiumRemoteCommands.RemoteCommandProtocol)
  func refresh(_ command: TealiumRemoteCommands.RemoteCommandProtocol, url: Foundation.URL, file: Swift.String)
  func remove(commandWithId: Swift.String)
  func remove(jsonCommand name: Swift.String)
  func removeAll()
  func trigger(command type: TealiumRemoteCommands.SimpleCommandType, with data: [Swift.String : Any], completion: TealiumCore.ModuleCompletion?)
  func triggerCommand(from request: Foundation.URLRequest) -> TealiumRemoteCommands.TealiumRemoteCommandsError?
}
public protocol RemoteCommandProtocol {
  var commandId: Swift.String { get }
  var type: TealiumRemoteCommands.RemoteCommandType { get set }
  var config: TealiumRemoteCommands.RemoteCommandConfig? { get set }
  var completion: (TealiumRemoteCommands.RemoteCommandResponseProtocol) -> Swift.Void { get set }
  var delegate: TealiumRemoteCommands.RemoteCommandDelegate? { get set }
  var description: Swift.String? { get set }
  func complete(with trackData: [Swift.String : Any], config: TealiumRemoteCommands.RemoteCommandConfig, completion: TealiumCore.ModuleCompletion?)
  func completeWith(response: TealiumRemoteCommands.RemoteCommandResponseProtocol)
  static func sendRemoteCommandResponse(for commandId: Swift.String, response: TealiumRemoteCommands.RemoteCommandResponseProtocol, delegate: TealiumCore.ModuleDelegate?)
}
public protocol RemoteCommandResponseProtocol {
  var payload: [Swift.String : Any]? { get set }
  var error: Swift.Error? { get set }
  var status: Swift.Int? { get set }
  var data: Foundation.Data? { get set }
  var hasCustomCompletionHandler: Swift.Bool { get set }
}
public protocol RemoteCommandDelegate : AnyObject {
  func remoteCommandRequestsExecution(_ command: TealiumRemoteCommands.RemoteCommandProtocol, response: TealiumRemoteCommands.RemoteCommandResponseProtocol)
}
public class RemoteCommandsModule : TealiumCore.Dispatcher {
  public var id: Swift.String
  public var config: TealiumCore.TealiumConfig
  public var isReady: Swift.Bool
  public var remoteCommands: TealiumRemoteCommands.RemoteCommandsManagerProtocol?
  required public init(config: TealiumCore.TealiumConfig, delegate: TealiumCore.ModuleDelegate, completion: TealiumCore.ModuleCompletion?)
  public func updateConfig(_ request: TealiumCore.TealiumUpdateConfigRequest)
  public func dynamicTrack(_ request: TealiumCore.TealiumRequest, completion: TealiumCore.ModuleCompletion?)
  @objc deinit
}
@_inheritsConvenienceInitializers public class RemoteHTTPCommand : TealiumRemoteCommands.RemoteCommand {
  public class func create(with delegate: TealiumCore.ModuleDelegate?) -> TealiumRemoteCommands.RemoteCommandProtocol
  public class func httpRequest(from payload: [Swift.String : Any]) -> (request: Foundation.URLRequest?, error: Swift.Error?)
  public class func queryItems(from dictionary: [Swift.String : Any]) -> [Foundation.URLQueryItem]
  @objc deinit
  override public init(commandId: Swift.String, description: Swift.String?, type: TealiumRemoteCommands.RemoteCommandType = super, completion: @escaping (TealiumRemoteCommands.RemoteCommandResponseProtocol) -> Swift.Void)
}
public protocol TealiumRegistration {
  func registerPushToken(_ token: Swift.String)
  func application(_ application: UIKit.UIApplication, didReceiveRemoteNotification userInfo: [Swift.AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIKit.UIBackgroundFetchResult) -> Swift.Void)
  @available(iOS 10.0, *)
  func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
  func pushAuthorization(fromUserNotificationCenter: Swift.Bool)
}
public protocol TealiumDeepLinkable {
  func application(_ application: UIKit.UIApplication, continue userActivity: Foundation.NSUserActivity, restorationHandler: @escaping ([UIKit.UIUserActivityRestoring]?) -> Swift.Void) -> Swift.Bool
}
extension TealiumRegistration {
  public func pushAuthorization(fromUserNotificationCenter: Swift.Bool)
  @available(iOS 10.0, *)
  public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
}
extension Tealium {
  public var remoteCommands: TealiumRemoteCommands.RemoteCommandsManagerProtocol? {
    get
  }
}
extension Dispatchers {
  public static let RemoteCommands: TealiumRemoteCommands.RemoteCommandsModule.Type
}
extension TealiumConfig {
  public var remoteHTTPCommandDisabled: Swift.Bool {
    get
    set
  }
  public func addRemoteCommand(_ command: TealiumRemoteCommands.RemoteCommandProtocol)
  public var remoteCommands: [TealiumRemoteCommands.RemoteCommandProtocol]? {
    get
    set
  }
  public var remoteCommandConfigRefresh: TealiumCore.TealiumRefreshInterval {
    get
    set
  }
}
extension Array where Element == TealiumRemoteCommands.RemoteCommandProtocol {
  public subscript(id: Swift.String) -> TealiumRemoteCommands.RemoteCommandProtocol? {
    get
  }
  public mutating func removeCommand(_ id: Swift.String)
}
extension String {
  public var isValidUrl: Swift.Bool {
    get
  }
  public var cacheBuster: Swift.String {
    get
  }
  public var fileName: Swift.String {
    get
  }
}
extension TealiumRemoteCommands.SimpleCommandType : Swift.Equatable {}
extension TealiumRemoteCommands.SimpleCommandType : Swift.Hashable {}
extension TealiumRemoteCommands.TealiumRemoteCommandsError : Swift.Hashable {}
